// <auto-generated />
using System;
using BurgerMvc.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurgerMvc.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240810130336_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BurgerMvc.DAL.Entities.ExtraIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ExtraIngredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(347),
                            IsDeleted = false,
                            Name = "Cheddar Peyniri",
                            Photo = "cheddar.jpeg",
                            Price = 1.5
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(352),
                            IsDeleted = false,
                            Name = "Jalapeno Biberi",
                            Photo = "jalapeno.jpeg",
                            Price = 1.0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(354),
                            IsDeleted = false,
                            Name = "Mantar",
                            Photo = "mantar.jpeg",
                            Price = 1.25
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(356),
                            IsDeleted = false,
                            Name = "Soğan",
                            Photo = "soğan.jpeg",
                            Price = 0.75
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(357),
                            IsDeleted = false,
                            Name = "Turşu",
                            Photo = "turşu.jpeg",
                            Price = 0.5
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(359),
                            IsDeleted = false,
                            Name = "Domates",
                            Photo = "domates.jpeg",
                            Price = 0.75
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(360),
                            IsDeleted = false,
                            Name = "Marul",
                            Photo = "marul.jpeg",
                            Price = 0.5
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(362),
                            IsDeleted = false,
                            Name = "Avokado",
                            Photo = "avokado.jpeg",
                            Price = 1.75
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(363),
                            IsDeleted = false,
                            Name = "Siyah Zeytin",
                            Photo = "siyahzeytin.jpg",
                            Price = 1.0
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(365),
                            IsDeleted = false,
                            Name = "Yeşil Zeytin",
                            Photo = "yeşilzeytin.jpeg",
                            Price = 1.0
                        });
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Siyah çavdar ekmeği, dana köftesi, cheddar peyniri, marul, domates, soğan, özel Python sosu (barbekü sos bazlı, hafif baharatlı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(197),
                            IsDeleted = false,
                            Photo = "python.jpeg",
                            Price = 7.9900000000000002,
                            Title = "Python Burger"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Tam buğday ekmeği, tavuk veya dana köftesi, çift cheddar peyniri, bacon, marul, domates,soğan,özelJava       sosu      (kahve ve hardal karışımı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(203),
                            IsDeleted = false,
                            Photo = "java.jpg",
                            Price = 8.9900000000000002,
                            Title = "Java Burger"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Siyah ekmek, renkli köfte (kırmızı pancar, havuç gibi sebzelerle), mavi peynir, marul, domates,soğan, özel        JavaScript sosu (tatlı ve ekşi karışımı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(283),
                            IsDeleted = false,
                            Photo = "javascript.jpeg",
                            Price = 9.4900000000000002,
                            Title = "JavaScript Burger"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Tam buğday ekmeği, baharatlı dana köftesi, mavi peynir, jalapeno biber, marul, domates, soğan, özel C++ sosu (acı biber sosu bazlı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(286),
                            IsDeleted = false,
                            Photo = "c++.jpeg",
                            Price = 8.7899999999999991,
                            Title = "C++ Burger"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Beyaz ekmek, tavuk veya dana köftesi, cheddar peyniri, marul, domates, soğan, özel C# sosu (barbeküsos ve      mayonez    karışımı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(288),
                            IsDeleted = false,
                            Photo = "csharp.jpeg",
                            Price = 8.2899999999999991,
                            Title = "C# Burger"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Siyah ekmek, elma ve cevizli köfte, brie peyniri, marul, elma dilimleri, özel Swift sosu (elma sirkes ve    bal       karışımı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(289),
                            IsDeleted = false,
                            Photo = "swift.jpeg",
                            Price = 9.9900000000000002,
                            Title = "Swift Burger"
                        },
                        new
                        {
                            Id = 7,
                            Content = "Tam buğday ekmeği, somon veya tofu köftesi, avokado, marul, domates, soğan, özel Ruby on Rails sosu (limonlu        mayonez bazlı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(291),
                            IsDeleted = false,
                            Photo = "ruby.jpg",
                            Price = 10.49,
                            Title = "Ruby on Rails Burger"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Beyaz ekmek, dana köftesi, cheddar peyniri, marul, domates, soğan, özel PHP sosu (barbekü sos ve ketçap karışımı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(292),
                            IsDeleted = false,
                            Photo = "php.jpg",
                            Price = 7.4900000000000002,
                            Title = "PHP Burger"
                        },
                        new
                        {
                            Id = 9,
                            Content = "Tam buğday ekmeği, dana köftesi, cheddar peyniri, marul, domates, soğan, özel Go sosu (soya sosu ve zencefil        karışımı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(294),
                            IsDeleted = false,
                            Photo = "go.jpg",
                            Price = 8.5899999999999999,
                            Title = "Go Burger"
                        },
                        new
                        {
                            Id = 10,
                            Content = "Siyah çavdar ekmeği, tavuk veya dana köftesi, gruyère peyniri, marul, domates, soğan, özel Kotlin sos       (hardal,  mayonez ve bal karışımı).",
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 189, DateTimeKind.Local).AddTicks(296),
                            IsDeleted = false,
                            Photo = "kotlin.jpeg",
                            Price = 8.9900000000000002,
                            Title = "Kotlin Burger"
                        });
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrderConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.OrdersExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExtraIngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtraIngredientId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersExtras");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.OrdersMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersMenu");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 188, DateTimeKind.Local).AddTicks(9870),
                            Email = "b",
                            IsAdmin = false,
                            IsDeleted = false,
                            Name = "John",
                            Password = "b",
                            Photo = "john_doe_photo.jpg",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 8, 10, 16, 3, 36, 188, DateTimeKind.Local).AddTicks(9897),
                            Email = "a",
                            IsAdmin = true,
                            IsDeleted = false,
                            Name = "Jane",
                            Password = "a",
                            Photo = "jane_smith_photo.jpg",
                            Surname = "Smith"
                        });
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.Order", b =>
                {
                    b.HasOne("BurgerMvc.DAL.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.OrdersExtra", b =>
                {
                    b.HasOne("BurgerMvc.DAL.Entities.ExtraIngredient", "ExtraIngredient")
                        .WithMany("OrdersExtras")
                        .HasForeignKey("ExtraIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerMvc.DAL.Entities.Order", "Order")
                        .WithMany("OrdersExtras")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraIngredient");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.OrdersMenu", b =>
                {
                    b.HasOne("BurgerMvc.DAL.Entities.MenuItem", "MenuItem")
                        .WithMany("OrdersMenus")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerMvc.DAL.Entities.Order", "Order")
                        .WithMany("OrdersMenus")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.ExtraIngredient", b =>
                {
                    b.Navigation("OrdersExtras");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.MenuItem", b =>
                {
                    b.Navigation("OrdersMenus");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.Order", b =>
                {
                    b.Navigation("OrdersExtras");

                    b.Navigation("OrdersMenus");
                });

            modelBuilder.Entity("BurgerMvc.DAL.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
